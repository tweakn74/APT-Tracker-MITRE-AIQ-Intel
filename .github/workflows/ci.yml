name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type check
        run: npm run type-check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  deploy-worker:
    name: Deploy Cloudflare Worker
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

  deploy-pages:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  backup:
    name: Backup and Version
    runs-on: ubuntu-latest
    needs: [deploy-worker, deploy-pages]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create version tag
        id: tag
        run: |
          TAG="threats-v$(date +%y%m%d-%H%M)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "Automated deployment $TAG"
          git push origin "$TAG"
      
      - name: Create artifact bundle
        run: |
          mkdir -p artifacts
          zip -r "artifacts/${{ steps.tag.outputs.tag }}.zip" \
            worker/ \
            index.html \
            app.js \
            package.json \
            wrangler.toml \
            -x "*.git*" "node_modules/*"
      
      - name: Export KV namespaces
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          mkdir -p backups
          npm run kv:export || echo "KV export skipped (requires KV namespace setup)"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ steps.tag.outputs.tag }}
          path: |
            artifacts/
            backups/
          retention-days: 90

  nightly-backup:
    name: Nightly Backup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run backup script
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: npm run backup
      
      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: nightly-backup-$(date +%Y%m%d)
          path: backups/
          retention-days: 30

# Schedule nightly backups at 2 AM UTC
on:
  schedule:
    - cron: '0 2 * * *'

